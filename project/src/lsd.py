# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lsd', [dirname(__file__)])
        except ImportError:
            import _lsd
            return _lsd
        if fp is not None:
            try:
                _mod = imp.load_module('_lsd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lsd = swig_import_helper()
    del swig_import_helper
else:
    import _lsd
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class TheVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TheVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TheVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _lsd.TheVector_a_set
    __swig_getmethods__["a"] = _lsd.TheVector_a_get
    if _newclass:a = _swig_property(_lsd.TheVector_a_get, _lsd.TheVector_a_set)
    __swig_setmethods__["b"] = _lsd.TheVector_b_set
    __swig_getmethods__["b"] = _lsd.TheVector_b_get
    if _newclass:b = _swig_property(_lsd.TheVector_b_get, _lsd.TheVector_b_set)
    __swig_setmethods__["c"] = _lsd.TheVector_c_set
    __swig_getmethods__["c"] = _lsd.TheVector_c_get
    if _newclass:c = _swig_property(_lsd.TheVector_c_get, _lsd.TheVector_c_set)
    def __init__(self): 
        this = _lsd.new_TheVector()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsd.delete_TheVector
    __del__ = lambda self : None;
TheVector_swigregister = _lsd.TheVector_swigregister
TheVector_swigregister(TheVector)

class ntuple_list_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ntuple_list_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ntuple_list_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _lsd.ntuple_list_s_size_set
    __swig_getmethods__["size"] = _lsd.ntuple_list_s_size_get
    if _newclass:size = _swig_property(_lsd.ntuple_list_s_size_get, _lsd.ntuple_list_s_size_set)
    __swig_setmethods__["max_size"] = _lsd.ntuple_list_s_max_size_set
    __swig_getmethods__["max_size"] = _lsd.ntuple_list_s_max_size_get
    if _newclass:max_size = _swig_property(_lsd.ntuple_list_s_max_size_get, _lsd.ntuple_list_s_max_size_set)
    __swig_setmethods__["dim"] = _lsd.ntuple_list_s_dim_set
    __swig_getmethods__["dim"] = _lsd.ntuple_list_s_dim_get
    if _newclass:dim = _swig_property(_lsd.ntuple_list_s_dim_get, _lsd.ntuple_list_s_dim_set)
    __swig_setmethods__["values"] = _lsd.ntuple_list_s_values_set
    __swig_getmethods__["values"] = _lsd.ntuple_list_s_values_get
    if _newclass:values = _swig_property(_lsd.ntuple_list_s_values_get, _lsd.ntuple_list_s_values_set)
    def __init__(self): 
        this = _lsd.new_ntuple_list_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsd.delete_ntuple_list_s
    __del__ = lambda self : None;
ntuple_list_s_swigregister = _lsd.ntuple_list_s_swigregister
ntuple_list_s_swigregister(ntuple_list_s)
cvar = _lsd.cvar


def free_ntuple_list(*args):
  return _lsd.free_ntuple_list(*args)
free_ntuple_list = _lsd.free_ntuple_list

def new_ntuple_list(*args):
  return _lsd.new_ntuple_list(*args)
new_ntuple_list = _lsd.new_ntuple_list
class image_char_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, image_char_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, image_char_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _lsd.image_char_s_data_set
    __swig_getmethods__["data"] = _lsd.image_char_s_data_get
    if _newclass:data = _swig_property(_lsd.image_char_s_data_get, _lsd.image_char_s_data_set)
    __swig_setmethods__["xsize"] = _lsd.image_char_s_xsize_set
    __swig_getmethods__["xsize"] = _lsd.image_char_s_xsize_get
    if _newclass:xsize = _swig_property(_lsd.image_char_s_xsize_get, _lsd.image_char_s_xsize_set)
    __swig_setmethods__["ysize"] = _lsd.image_char_s_ysize_set
    __swig_getmethods__["ysize"] = _lsd.image_char_s_ysize_get
    if _newclass:ysize = _swig_property(_lsd.image_char_s_ysize_get, _lsd.image_char_s_ysize_set)
    def __init__(self): 
        this = _lsd.new_image_char_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsd.delete_image_char_s
    __del__ = lambda self : None;
image_char_s_swigregister = _lsd.image_char_s_swigregister
image_char_s_swigregister(image_char_s)


def free_image_char(*args):
  return _lsd.free_image_char(*args)
free_image_char = _lsd.free_image_char

def new_image_char(*args):
  return _lsd.new_image_char(*args)
new_image_char = _lsd.new_image_char

def new_image_char_ini(*args):
  return _lsd.new_image_char_ini(*args)
new_image_char_ini = _lsd.new_image_char_ini
class image_int_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, image_int_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, image_int_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _lsd.image_int_s_data_set
    __swig_getmethods__["data"] = _lsd.image_int_s_data_get
    if _newclass:data = _swig_property(_lsd.image_int_s_data_get, _lsd.image_int_s_data_set)
    __swig_setmethods__["xsize"] = _lsd.image_int_s_xsize_set
    __swig_getmethods__["xsize"] = _lsd.image_int_s_xsize_get
    if _newclass:xsize = _swig_property(_lsd.image_int_s_xsize_get, _lsd.image_int_s_xsize_set)
    __swig_setmethods__["ysize"] = _lsd.image_int_s_ysize_set
    __swig_getmethods__["ysize"] = _lsd.image_int_s_ysize_get
    if _newclass:ysize = _swig_property(_lsd.image_int_s_ysize_get, _lsd.image_int_s_ysize_set)
    def __init__(self): 
        this = _lsd.new_image_int_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsd.delete_image_int_s
    __del__ = lambda self : None;
image_int_s_swigregister = _lsd.image_int_s_swigregister
image_int_s_swigregister(image_int_s)


def free_image_int(*args):
  return _lsd.free_image_int(*args)
free_image_int = _lsd.free_image_int

def new_image_int(*args):
  return _lsd.new_image_int(*args)
new_image_int = _lsd.new_image_int

def new_image_int_ini(*args):
  return _lsd.new_image_int_ini(*args)
new_image_int_ini = _lsd.new_image_int_ini
class image_double_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, image_double_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, image_double_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _lsd.image_double_s_data_set
    __swig_getmethods__["data"] = _lsd.image_double_s_data_get
    if _newclass:data = _swig_property(_lsd.image_double_s_data_get, _lsd.image_double_s_data_set)
    __swig_setmethods__["xsize"] = _lsd.image_double_s_xsize_set
    __swig_getmethods__["xsize"] = _lsd.image_double_s_xsize_get
    if _newclass:xsize = _swig_property(_lsd.image_double_s_xsize_get, _lsd.image_double_s_xsize_set)
    __swig_setmethods__["ysize"] = _lsd.image_double_s_ysize_set
    __swig_getmethods__["ysize"] = _lsd.image_double_s_ysize_get
    if _newclass:ysize = _swig_property(_lsd.image_double_s_ysize_get, _lsd.image_double_s_ysize_set)
    def __init__(self): 
        this = _lsd.new_image_double_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsd.delete_image_double_s
    __del__ = lambda self : None;
image_double_s_swigregister = _lsd.image_double_s_swigregister
image_double_s_swigregister(image_double_s)


def free_image_double(*args):
  return _lsd.free_image_double(*args)
free_image_double = _lsd.free_image_double

def new_image_double(*args):
  return _lsd.new_image_double(*args)
new_image_double = _lsd.new_image_double

def new_image_double_ini(*args):
  return _lsd.new_image_double_ini(*args)
new_image_double_ini = _lsd.new_image_double_ini

def makeImageDoubleForPython(*args):
  return _lsd.makeImageDoubleForPython(*args)
makeImageDoubleForPython = _lsd.makeImageDoubleForPython

def LineSegmentDetection(*args):
  return _lsd.LineSegmentDetection(*args)
LineSegmentDetection = _lsd.LineSegmentDetection

def lsd_scale(*args):
  return _lsd.lsd_scale(*args)
lsd_scale = _lsd.lsd_scale

def lsd(*args):
  return _lsd.lsd(*args)
lsd = _lsd.lsd
class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lsd.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lsd.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _lsd.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _lsd.doubleArray___setitem__(self, *args)
    def cast(self): return _lsd.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _lsd.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_lsd.doubleArray_frompointer)
doubleArray_swigregister = _lsd.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _lsd.doubleArray_frompointer(*args)
doubleArray_frompointer = _lsd.doubleArray_frompointer

# This file is compatible with both classic and new-style classes.


